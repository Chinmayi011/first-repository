#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

#define TABLE_SIZE 100003

typedef struct Node {
    int key;
    struct Node* next;
} Node;

typedef struct HashTable {
    Node* table[TABLE_SIZE];
} HashTable;

// Hash function for integers
int hash(int key) {
    if (key < 0) key = -key;
    return key % TABLE_SIZE;
}

// Create hash table
HashTable* createHashTable() {
    HashTable* ht = (HashTable*)malloc(sizeof(HashTable));
    for (int i = 0; i < TABLE_SIZE; i++)
        ht->table[i] = NULL;
    return ht;
}

// Insert key into hash table
void insert(HashTable* ht, int key) {
    int h = hash(key);
    Node* node = (Node*)malloc(sizeof(Node));
    node->key = key;
    node->next = ht->table[h];
    ht->table[h] = node;
}

// Search for key in hash table
int exists(HashTable* ht, int key) {
    int h = hash(key);
    Node* node = ht->table[h];
    while (node) {
        if (node->key == key)
            return 1;
        node = node->next;
    }
    return 0;
}

// Free hash table
void freeHashTable(HashTable* ht) {
    for (int i = 0; i < TABLE_SIZE; i++) {
        Node* node = ht->table[i];
        while (node) {
            Node* tmp = node;
            node = node->next;
            free(tmp);
        }
    }
    free(ht);
}

/*
 * Complete the 'pairs' function below.
 */
int pairs(int k, int arr_count, int* arr) {
    HashTable* ht = createHashTable();
    int count = 0;
    // Insert all elements into hash table
    for (int i = 0; i < arr_count; i++)
        insert(ht, arr[i]);

    // Count valid pairs (x, x+k)
    for (int i = 0; i < arr_count; i++) {
        if (exists(ht, arr[i] + k))
            count++;
    }

    freeHashTable(ht);
    return count;
}

// Main with assert tests
int main() {
    // Test 1: Sample case from images
    int arr1[] = {1, 5, 3, 4, 2};
    assert(pairs(2, 5, arr1) == 3);

    // Test 2: Provided example
    int arr2[] = {1, 2, 3, 4};
    assert(pairs(1, 4, arr2) == 3);

    // Test 3: All difference is 1
    int arr3[] = {10, 11, 12, 13};
    assert(pairs(1, 4, arr3) == 3);

    // Test 4: No pair difference matches
    int arr4[] = {1, 3, 8, 15};
    assert(pairs(5, 4, arr4) == 0);

    // Test 5: Large k, only one pair
    int arr5[] = {100, 200, 300, 400, 500};
    assert(pairs(100, 5, arr5) == 4);

    // Test 6: Negative integers
    int arr6[] = {-2, 0, 2, -4, -6};
    assert(pairs(2, 5, arr6) == 2); // (-4, -2), (-2, 0)

    // Test 7: Single element
    int arr7[] = {5};
    assert(pairs(3, 1, arr7) == 0);

    printf("All tests passed.\n");
    return 0;
}

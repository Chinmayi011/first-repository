#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define EDGE_WEIGHT 6

// BFS function
int* bfs(int n, int m, int edges_rows, int edges_columns, int** edges, int s, int* result_count) {
    // Build adjacency list
    int** adj = (int*)malloc((n+1) * sizeof(int));
    int* adj_size = (int*)calloc((n+1), sizeof(int));
    
    // First count edges per node
    for (int i = 0; i < m; i++) {
        int u = edges[i][0];
        int v = edges[i][1];
        adj_size[u]++;
        adj_size[v]++;
    }
    
    // Allocate adjacency lists
    for (int i = 1; i <= n; i++) {
        adj[i] = (int*)malloc(adj_size[i] * sizeof(int));
        adj_size[i] = 0; // reset for use in filling
    }
    
    // Fill adjacency list
    for (int i = 0; i < m; i++) {
        int u = edges[i][0];
        int v = edges[i][1];
        adj[u][adj_size[u]++] = v;
        adj[v][adj_size[v]++] = u;
    }
    
    // Distance array
    int* dist = (int*)malloc((n+1) * sizeof(int));
    for (int i = 1; i <= n; i++) dist[i] = -1;
    
    // BFS queue
    int* queue = (int*)malloc(n * sizeof(int));
    int front = 0, back = 0;
    
    dist[s] = 0;
    queue[back++] = s;
    
    while (front < back) {
        int u = queue[front++];
        for (int i = 0; i < adj_size[u]; i++) {
            int v = adj[u][i];
            if (dist[v] == -1) {
                dist[v] = dist[u] + EDGE_WEIGHT;
                queue[back++] = v;
            }
        }
    }
    
    // Prepare result (excluding start node)
    *result_count = n - 1;
    int* result = (int*)malloc((*result_count) * sizeof(int));
    int idx = 0;
    for (int i = 1; i <= n; i++) {
        if (i == s) continue;
        result[idx++] = dist[i];
    }
    
    // Free memory
    for (int i = 1; i <= n; i++) free(adj[i]);
    free(adj);
    free(adj_size);
    free(dist);
    free(queue);
    
    return result;
}

int main() {
    int q;
    scanf("%d", &q);
    
    while (q--) {
        int n, m;
        scanf("%d %d", &n, &m);
        
        int** edges = (int*)malloc(m * sizeof(int));
        for (int i = 0; i < m; i++) {
            edges[i] = (int*)malloc(2 * sizeof(int));
            scanf("%d %d", &edges[i][0], &edges[i][1]);
        }
        
        int s;
        scanf("%d", &s);
        
        int result_count;
        int* result = bfs(n, m, m, 2, edges, s, &result_count);
        
        for (int i = 0; i < result_count; i++) {
            printf("%d ", result[i]);
        }
        printf("\n");
        
        for (int i = 0; i < m; i++) free(edges[i]);
        free(edges);
        free(result);
    }
    return 0;
}